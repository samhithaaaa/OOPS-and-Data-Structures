/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;
struct node
  {
    int data;
    node *next;
  };	
  
  class list
  {
    public:
    node *head, *tail;
    public:
    list()
    {
      head=NULL;
      tail=NULL;
    }
    void createnode(int value){
        node *temp=new node;
        temp->data=value;
        temp->next=NULL;
        if(head==NULL)
      {
        head=temp;
        tail=temp;
        temp=NULL;
        
      }
      else{
          tail->next=temp;
        tail=temp;
      }
    }
    void insert_start(int value){
        node *temp=new node;
        temp->data=value;
    temp->next=head;
    head=temp;
    
    }
    void insert_position(int pos, int value)
  {
    node *pre=new node;
    node *cur=new node;
    node *temp=new node;
    cur=head;
    for(int i=1;i<pos;i++)
    {
      pre=cur;
      cur=cur->next;
    }
    temp->data=value;
    pre->next=temp;	
    temp->next=cur;
  }
  void delete_first()
  {
    node *temp=new node;
    temp=head;
    head=head->next;
    delete temp;
  }
    void display()
  {
    node *temp=new node;
    temp=head;
    while(temp!=NULL)
    {
      cout<<temp->data<<"\t";
      temp=temp->next;
    }
  } 
void delete_last()
  {
    node *current=new node;
    node *previous=new node;
    current=head;
    while(current->next!=NULL)
    {
      previous=current;
      current=current->next;	
    }
    tail=previous;
    previous->next=NULL;
    delete current;
  }
  void delete_position(int pos)
  {
    node *current=new node;
    node *previous=new node;
    current=head;
    for(int i=1;i<pos;i++)
    {
      previous=current;
      current=current->next;
    }
    previous->next=current->next;
    delete current;
  }
  };
    
    
int main()
{
    //cout<<"Hello World";
    list ll;
    ll.createnode(10);
    ll.createnode(20);
    ll.createnode(30);
    ll.delete_position(3);
    //ll.display();
    //ll.insert_start(40);
    //ll.insert_position(2, 9);
    //ll.delete_first();
    //ll.delete_last();
    ll.display();
    
    return 0;
}



